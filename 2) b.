import numpy as np
M=1000000007

def mod_add(a, b):
    a=(a%M+M)%M
    b=(b%M+M)%M
    return (a+b)%M

def mod_multiply(a, b):
    a=(a%M+M)%M
    b=(b%M+M)%M
    return (a*b)%M

def mod_divide(a, b):
    a=(a%M+M)%M
    b=(b%M+M)%M
    return mod_multiply(a, pow(b, M-2, M))

# Problem 3b
def optimal_strategy(na, nb, tot_rounds):
    """
    Calculate the optimal strategy for Alice maximize her points in the future rounds
    given the current score of Alice(na) and Bob(nb) and the total number of rounds(tot_rounds).
    
    Return the answer in form of a list [p1, p2, p3],
    where p1 is the probability of playing Attacking
    p2 is the probability of playing Balanced
    p3 is the probability of playing Defensive
    """
    answer=E(na,nb,tot_rounds)[1]
    if(answer==1):
        return [0,1,0]
    elif(answer==0):
        return [1,0,0]
    else:
        return [0,0,1]

def expected_points(tot_rounds):
    """
    Given the total number of rounds(tot_rounds), calculate the expected points that Alice can score after the tot_rounds,
    assuming that Alice plays optimally.

    Return : The expected points that Alice can score after the tot_rounds.
    """
    return 1 + E(1, 1, tot_rounds - 2)[0]

#Function which return expected number of points of allice in next T rounds
def E(alice_wins, bob_wins, T):
    dp = [[[-1 for _ in range(bob_wins+T + 1)] for _ in range(alice_wins+T + 1)] for _ in range(T + 1)]
    return exp(alice_wins,bob_wins,T,dp)

def exp(alice_wins, bob_wins, T, dp):
    payoff_matrix = np.array([[(bob_wins/(bob_wins+alice_wins),0,alice_wins/(alice_wins+bob_wins)), (0.7,0,0.3), (5/11,0,6/11)],  [(0.3, 0, 0.7), (1/3,1/3,1/3), (0.3,0.5,0.2)], 
        [(6/11,0,5/11), (0.2,0.5,0.3), (0.1,0.8,0.1)]])

    if(dp[T][alice_wins][bob_wins]!=-1):
        return dp[T][alice_wins][bob_wins]
    if(T==1):
        #Return greedy
        Attack=(1/3)*(bob_wins/(alice_wins+bob_wins)+ 7/10 + 5/11)
        Balanced=(1/3)*(3/10 + 1/3 + (1/2)*(1/3) + 3/10 + (1/2)*(1/2))
        Defence=(1/3)*(6/11 + 1/5 + (1/2)*(1/2) + 1/10 + (4/5)*(1/2))
        if(Attack==max(Attack,Balanced,Defence)):
            dp[T][alice_wins][bob_wins] = 0
            # print(Attack)
            return (Attack,0)
        elif(Balanced==max(Attack,Balanced,Defence)):
            dp[T][alice_wins][bob_wins] = 1
            return (Balanced,1)
        else:
            dp[T][alice_wins][bob_wins] = 2
            return (Defence,2)
    else:
        if(dp[T-1][alice_wins+1][bob_wins]==-1):
            dp[T-1][alice_wins+1][bob_wins]=exp(alice_wins+1,bob_wins,T-1,dp)[0]
        if(dp[T-1][alice_wins][bob_wins+1]==-1):
            dp[T-1][alice_wins][bob_wins+1]=exp(alice_wins,bob_wins+1,T-1,dp)[0]
        if (dp[T-1][alice_wins][bob_wins]==-1):
            dp[T-1][alice_wins][bob_wins]=exp(alice_wins,bob_wins,T-1,dp)[0]
            
        Attack=(1/3)*((payoff_matrix[0][0][0]*(1+dp[T-1][alice_wins+1][bob_wins]))+(payoff_matrix[0][0][1]*(0.5+dp[T-1][alice_wins][bob_wins]))+(payoff_matrix[0][0][2]*(dp[T-1][alice_wins][bob_wins+1]))
        + (7/10*(1+dp[T-1][alice_wins+1][bob_wins]))+(0.3*(dp[T-1][alice_wins][bob_wins+1]))
        + (5/11*(1+dp[T-1][alice_wins+1][bob_wins]))+(6/11*(dp[T-1][alice_wins][bob_wins+1])))

        Balanced=(1/3)*(0.3*(1+dp[T-1][alice_wins+1][bob_wins])+0.7*(dp[T-1][alice_wins][bob_wins+1])
        + 1/3*((1+dp[T-1][alice_wins+1][bob_wins])+(0.5+dp[T-1][alice_wins][bob_wins])+(dp[T-1][alice_wins][bob_wins+1]))
        + 0.3*(1+dp[T-1][alice_wins+1][bob_wins])+0.5*(0.5+dp[T-1][alice_wins][bob_wins])+0.2*(dp[T-1][alice_wins][bob_wins+1]))

        Defence=(1/3)*(6/11*(1+dp[T-1][alice_wins+1][bob_wins])+5/11*(dp[T-1][alice_wins][bob_wins+1])
        + 0.2*(1+dp[T-1][alice_wins+1][bob_wins])+0.5*(0.5+dp[T-1][alice_wins][bob_wins])+0.3*(dp[T-1][alice_wins][bob_wins+1])
        + 0.1*(1+dp[T-1][alice_wins+1][bob_wins])+0.8*(0.5+dp[T-1][alice_wins][bob_wins])+0.1*(dp[T-1][alice_wins][bob_wins+1]))

        if(Attack==max(Attack,Balanced,Defence)):
            dp[T][alice_wins][bob_wins] = 0
            return (Attack,0)
        elif(Balanced==max(Attack,Balanced,Defence)):
            dp[T][alice_wins][bob_wins] = 1
            return (Balanced,1)
        else:
            dp[T][alice_wins][bob_wins] = 2
            return (Defence,2)

print(optimal_strategy(1,1,1))
print(expected_points(72))
